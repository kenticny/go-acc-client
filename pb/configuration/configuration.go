// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pbs/configuration/configuration.proto

/*
Package configuration is a generated protocol buffer package.

It is generated from these files:
	pbs/configuration/configuration.proto

It has these top-level messages:
	Auth
	RequestMesaage
	Client
	Key
	Config
	Configs
	ConfigMeta
	ConfigMetas
	Empty
*/
package configuration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_PULL   MessageType = 0
	MessageType_CHECK  MessageType = 1
	MessageType_ENSURE MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "PULL",
	1: "CHECK",
	2: "ENSURE",
}
var MessageType_value = map[string]int32{
	"PULL":   0,
	"CHECK":  1,
	"ENSURE": 2,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Environment int32

const (
	Environment_LOCAL         Environment = 0
	Environment_DEVELOPMENT   Environment = 1
	Environment_PREPRODUCTION Environment = 2
	Environment_PRODUCTION    Environment = 3
)

var Environment_name = map[int32]string{
	0: "LOCAL",
	1: "DEVELOPMENT",
	2: "PREPRODUCTION",
	3: "PRODUCTION",
}
var Environment_value = map[string]int32{
	"LOCAL":         0,
	"DEVELOPMENT":   1,
	"PREPRODUCTION": 2,
	"PRODUCTION":    3,
}

func (x Environment) String() string {
	return proto.EnumName(Environment_name, int32(x))
}
func (Environment) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Auth struct {
	Appid     string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Appsecret string `protobuf:"bytes,2,opt,name=appsecret" json:"appsecret,omitempty"`
}

func (m *Auth) Reset()                    { *m = Auth{} }
func (m *Auth) String() string            { return proto.CompactTextString(m) }
func (*Auth) ProtoMessage()               {}
func (*Auth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Auth) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *Auth) GetAppsecret() string {
	if m != nil {
		return m.Appsecret
	}
	return ""
}

type RequestMesaage struct {
	Keys   []*Key      `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Type   MessageType `protobuf:"varint,2,opt,name=type,enum=configuration.MessageType" json:"type,omitempty"`
	Env    Environment `protobuf:"varint,3,opt,name=env,enum=configuration.Environment" json:"env,omitempty"`
	Client *Client     `protobuf:"bytes,4,opt,name=client" json:"client,omitempty"`
}

func (m *RequestMesaage) Reset()                    { *m = RequestMesaage{} }
func (m *RequestMesaage) String() string            { return proto.CompactTextString(m) }
func (*RequestMesaage) ProtoMessage()               {}
func (*RequestMesaage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestMesaage) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *RequestMesaage) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_PULL
}

func (m *RequestMesaage) GetEnv() Environment {
	if m != nil {
		return m.Env
	}
	return Environment_LOCAL
}

func (m *RequestMesaage) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type Client struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Main  string `protobuf:"bytes,2,opt,name=main" json:"main,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Client) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Client) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

type Key struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Config struct {
	Config  string `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Config) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *Config) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Configs struct {
	Configs []*Config `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
}

func (m *Configs) Reset()                    { *m = Configs{} }
func (m *Configs) String() string            { return proto.CompactTextString(m) }
func (*Configs) ProtoMessage()               {}
func (*Configs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Configs) GetConfigs() []*Config {
	if m != nil {
		return m.Configs
	}
	return nil
}

type ConfigMeta struct {
	Key     string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *ConfigMeta) Reset()                    { *m = ConfigMeta{} }
func (m *ConfigMeta) String() string            { return proto.CompactTextString(m) }
func (*ConfigMeta) ProtoMessage()               {}
func (*ConfigMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ConfigMeta) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigMeta) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ConfigMetas struct {
	Metas []*ConfigMeta `protobuf:"bytes,1,rep,name=metas" json:"metas,omitempty"`
}

func (m *ConfigMetas) Reset()                    { *m = ConfigMetas{} }
func (m *ConfigMetas) String() string            { return proto.CompactTextString(m) }
func (*ConfigMetas) ProtoMessage()               {}
func (*ConfigMetas) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ConfigMetas) GetMetas() []*ConfigMeta {
	if m != nil {
		return m.Metas
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Auth)(nil), "configuration.Auth")
	proto.RegisterType((*RequestMesaage)(nil), "configuration.RequestMesaage")
	proto.RegisterType((*Client)(nil), "configuration.Client")
	proto.RegisterType((*Key)(nil), "configuration.Key")
	proto.RegisterType((*Config)(nil), "configuration.Config")
	proto.RegisterType((*Configs)(nil), "configuration.Configs")
	proto.RegisterType((*ConfigMeta)(nil), "configuration.ConfigMeta")
	proto.RegisterType((*ConfigMetas)(nil), "configuration.ConfigMetas")
	proto.RegisterType((*Empty)(nil), "configuration.Empty")
	proto.RegisterEnum("configuration.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("configuration.Environment", Environment_name, Environment_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Configuration service

type ConfigurationClient interface {
	Signin(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Client, error)
	Pull(ctx context.Context, in *RequestMesaage, opts ...grpc.CallOption) (*Configs, error)
	Check(ctx context.Context, in *RequestMesaage, opts ...grpc.CallOption) (*ConfigMetas, error)
	Ensure(ctx context.Context, in *RequestMesaage, opts ...grpc.CallOption) (*Empty, error)
}

type configurationClient struct {
	cc *grpc.ClientConn
}

func NewConfigurationClient(cc *grpc.ClientConn) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) Signin(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := grpc.Invoke(ctx, "/configuration.Configuration/Signin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) Pull(ctx context.Context, in *RequestMesaage, opts ...grpc.CallOption) (*Configs, error) {
	out := new(Configs)
	err := grpc.Invoke(ctx, "/configuration.Configuration/Pull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) Check(ctx context.Context, in *RequestMesaage, opts ...grpc.CallOption) (*ConfigMetas, error) {
	out := new(ConfigMetas)
	err := grpc.Invoke(ctx, "/configuration.Configuration/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) Ensure(ctx context.Context, in *RequestMesaage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/configuration.Configuration/Ensure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Configuration service

type ConfigurationServer interface {
	Signin(context.Context, *Auth) (*Client, error)
	Pull(context.Context, *RequestMesaage) (*Configs, error)
	Check(context.Context, *RequestMesaage) (*ConfigMetas, error)
	Ensure(context.Context, *RequestMesaage) (*Empty, error)
}

func RegisterConfigurationServer(s *grpc.Server, srv ConfigurationServer) {
	s.RegisterService(&_Configuration_serviceDesc, srv)
}

func _Configuration_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.Configuration/Signin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Signin(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMesaage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.Configuration/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Pull(ctx, req.(*RequestMesaage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMesaage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.Configuration/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Check(ctx, req.(*RequestMesaage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_Ensure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMesaage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Ensure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.Configuration/Ensure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Ensure(ctx, req.(*RequestMesaage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Configuration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "configuration.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signin",
			Handler:    _Configuration_Signin_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Configuration_Pull_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Configuration_Check_Handler,
		},
		{
			MethodName: "Ensure",
			Handler:    _Configuration_Ensure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbs/configuration/configuration.proto",
}

func init() { proto.RegisterFile("pbs/configuration/configuration.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x6f, 0x8f, 0xd2, 0x4e,
	0x10, 0xc7, 0x29, 0x2d, 0xe5, 0x77, 0xd3, 0xc0, 0xaf, 0x8e, 0xe7, 0x59, 0x89, 0x26, 0xa4, 0x89,
	0x86, 0x5c, 0x94, 0x4b, 0x30, 0x31, 0x86, 0x07, 0x9a, 0x4b, 0x69, 0xa2, 0xe1, 0x6f, 0xf6, 0xc0,
	0xe7, 0x3d, 0x1c, 0xb9, 0x06, 0xd8, 0xd6, 0xee, 0x42, 0xd2, 0x57, 0xe1, 0xab, 0xf2, 0x7d, 0x99,
	0x6e, 0x4b, 0x0e, 0x38, 0xf4, 0x9e, 0xed, 0x77, 0xe6, 0x33, 0x7f, 0x76, 0x76, 0x16, 0x5e, 0xc7,
	0xb7, 0xe2, 0x6a, 0x1e, 0xf1, 0x1f, 0xe1, 0x62, 0x93, 0x04, 0x32, 0x8c, 0xf8, 0xa1, 0x6a, 0xc7,
	0x49, 0x24, 0x23, 0xac, 0x1d, 0x18, 0xdd, 0x2e, 0x18, 0xd7, 0x1b, 0x79, 0x87, 0xe7, 0x50, 0x09,
	0xe2, 0x38, 0xfc, 0xee, 0x68, 0x4d, 0xad, 0x75, 0xc6, 0x72, 0x81, 0x2f, 0xe1, 0x2c, 0x88, 0x63,
	0x41, 0xf3, 0x84, 0xa4, 0x53, 0x56, 0x9e, 0x7b, 0x83, 0xfb, 0x5b, 0x83, 0x3a, 0xa3, 0x9f, 0x1b,
	0x12, 0x72, 0x48, 0x22, 0x08, 0x16, 0x84, 0x6f, 0xc0, 0x58, 0x52, 0x2a, 0x1c, 0xad, 0xa9, 0xb7,
	0xac, 0x0e, 0xb6, 0x0f, 0x3b, 0xe8, 0x53, 0xca, 0x94, 0x1f, 0xdb, 0x60, 0xc8, 0x34, 0x26, 0x95,
	0xb3, 0xde, 0x69, 0x1c, 0x71, 0x43, 0x12, 0x22, 0x58, 0xd0, 0x34, 0x8d, 0x89, 0x29, 0x0e, 0xdf,
	0x82, 0x4e, 0x7c, 0xeb, 0xe8, 0x27, 0x71, 0x9f, 0x6f, 0xc3, 0x24, 0xe2, 0x6b, 0xe2, 0x92, 0x65,
	0x18, 0xbe, 0x03, 0x73, 0xbe, 0x0a, 0x89, 0x4b, 0xc7, 0x68, 0x6a, 0x2d, 0xab, 0xf3, 0xec, 0x28,
	0xc0, 0x53, 0x4e, 0x56, 0x40, 0x6e, 0x07, 0xcc, 0xdc, 0x92, 0x4d, 0x41, 0x46, 0x4b, 0xe2, 0xbb,
	0x29, 0x28, 0x81, 0x08, 0xc6, 0x3a, 0x08, 0x79, 0x31, 0x00, 0x75, 0x76, 0x9f, 0x83, 0xde, 0xa7,
	0x14, 0x6d, 0xd0, 0x97, 0x94, 0x16, 0x78, 0x76, 0x74, 0xbb, 0x60, 0x7a, 0xaa, 0x18, 0x5e, 0x80,
	0x99, 0x97, 0x2d, 0xdc, 0x85, 0x42, 0x07, 0xaa, 0x5b, 0x4a, 0x44, 0x18, 0xe5, 0x19, 0x75, 0xb6,
	0x93, 0x6e, 0x17, 0xaa, 0x79, 0xac, 0xc0, 0x2b, 0xa8, 0xe6, 0xf8, 0x6e, 0x96, 0x0f, 0xee, 0xa0,
	0x14, 0xdb, 0x51, 0xee, 0x47, 0x80, 0xdc, 0x34, 0x24, 0x19, 0x3c, 0xec, 0xeb, 0x1f, 0x55, 0x3f,
	0x81, 0x75, 0x1f, 0x99, 0x55, 0xae, 0xac, 0xb3, 0x43, 0x51, 0xf7, 0xc5, 0xc9, 0xba, 0x19, 0xca,
	0x72, 0xce, 0xad, 0x42, 0xc5, 0x5f, 0xc7, 0x32, 0xbd, 0x6c, 0x83, 0xb5, 0xf7, 0x72, 0xf8, 0x1f,
	0x18, 0x93, 0xd9, 0x60, 0x60, 0x97, 0xf0, 0x0c, 0x2a, 0xde, 0x17, 0xdf, 0xeb, 0xdb, 0x1a, 0x02,
	0x98, 0xfe, 0xe8, 0x66, 0xc6, 0x7c, 0xbb, 0x7c, 0x39, 0x00, 0x6b, 0xef, 0xe9, 0x32, 0x6a, 0x30,
	0xf6, 0xae, 0xb3, 0x80, 0xff, 0xc1, 0xea, 0xf9, 0xdf, 0xfc, 0xc1, 0x78, 0x32, 0xf4, 0x47, 0x53,
	0x5b, 0xc3, 0x27, 0x50, 0x9b, 0x30, 0x7f, 0xc2, 0xc6, 0xbd, 0x99, 0x37, 0xfd, 0x3a, 0x1e, 0xd9,
	0x65, 0xac, 0x03, 0xec, 0x69, 0xbd, 0xf3, 0xab, 0x0c, 0x35, 0x6f, 0xbf, 0x55, 0xfc, 0x00, 0xe6,
	0x4d, 0xb8, 0xe0, 0x21, 0xc7, 0xa7, 0x47, 0x97, 0xc8, 0x56, 0xbe, 0x71, 0x7a, 0x2b, 0xdc, 0x12,
	0x7e, 0x06, 0x63, 0xb2, 0x59, 0xad, 0xf0, 0xd5, 0x11, 0x70, 0xb8, 0xeb, 0x8d, 0x8b, 0x93, 0x93,
	0x11, 0x6e, 0x09, 0x7b, 0x50, 0xf1, 0xee, 0x68, 0xbe, 0x7c, 0x2c, 0x43, 0xe3, 0xaf, 0xb3, 0x15,
	0xaa, 0x0d, 0xd3, 0xe7, 0x62, 0x93, 0xd0, 0x63, 0x69, 0xce, 0x8f, 0xff, 0x43, 0xf6, 0x1a, 0x6e,
	0xe9, 0xd6, 0x54, 0x3f, 0xfe, 0xfd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x18, 0x7e, 0x20,
	0x1a, 0x04, 0x00, 0x00,
}
